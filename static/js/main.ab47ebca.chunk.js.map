{"version":3,"sources":["style.js","components/Header.jsx","components/Gameboard.jsx","factories/createGameboard.js","factories/createPlayer.js","factories/createShip.js","components/Game.jsx","components/Menu.jsx","components/GameOver.jsx","components/App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","Nav","styled","nav","Title","h1","Logo","img","Container","section","Notification","div","BoardContainer","Board","table","Heading","Cell","td","props","isActive","isLabel","isInteractive","FlexibleFormat","BlurBackground","Button","button","margin","Text","p","TooltipContainer","span","width","Header","src","alt","Gameboard","title","board","receivedAttacks","clickHandler","isLabelled","areShipsHidden","getAttack","x","y","find","attack","getIcon","isSuccess","map","label","i","row","j","cell","onClick","createGameboard","size","gameboard","Array","from","length","ships","attacks","getBoard","getAttacks","place","ship","isHorizontal","includes","undefined","Error","parseInt","hit","isSunk","xx","yy","tempBoard","push","receiveAttack","getShipPosition","allShipsSunk","every","createPlayer","player","isRobot","Object","prototype","toString","call","slice","cells","forEach","_","fixedAttack","filter","randomAttack","Math","floor","random","getName","getType","getCells","takeAttack","createShip","state","position","reduce","sum","el","Game","endGame","useState","human","robot","gameboards","setGameboards","isHumanTurn","setIsHumanTurn","setAttacks","useEffect","hasPlaced","isHor","e","setTimeout","Menu","startGame","setGameboard","setShips","setIsHorizontal","isFinishedPlacing","setIsFinishedPlacing","setIsInteractive","isTooltipVisible","setIsTooltipVisible","tempGameboard","MouseTooltip","visible","offsetX","offsetY","GameOver","isHumanWinner","App","start","game","end","gameState","setGameState","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab47ebca.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Lato', roboto;\n  }\n  body {\n    background-color: #111;\n  }\n  :root {\n    --primary-color: #229d71;\n  }\n`;\n\nexport const Nav = styled.nav`\n  text-align: center;\n  padding-top: 3em;\n  margin: 0.5em 0;\n  position: relative;\n\n  @media (min-width: 700px) {\n    margin: 2em 0;\n  }\n`;\n\nexport const Title = styled.h1`\n  color: var(--primary-color);\n  font-family: 'Anton';\n  font-size: 2em;\n  letter-spacing: 5px;\n  text-shadow: 3px 3px rgba(0, 0, 0, 0.5);\n  text-transform: uppercase;\n\n  @media (min-width: 700px) {\n    font-size: 3em;\n  }\n`;\n\nexport const Logo = styled.img`\n  filter: invert(44%) sepia(91%) saturate(357%) hue-rotate(107deg)\n    brightness(95%) contrast(89%);\n  transform: scaleX(-1);\n  position: absolute;\n  top: -75%;\n  margin-left: -114px;\n\n  @media (min-width: 700px) {\n    top: -58%;\n    margin-left: -151px;\n  }\n`;\n\nexport const Container = styled.section`\n  background-color: #222;\n  border-radius: 10px;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.1);\n  margin: 0 auto;\n  overflow: hidden;\n  padding: 0 0.5em 0.5em 0.5em;\n  width: fit-content;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Notification = styled.div`\n  background-color: var(--primary-color);\n  padding: 0.5em;\n  position: relative;\n  text-align: center;\n  width: 110%;\n\n  @media (min-width: 700px) {\n    padding: 0.75em;\n  }\n`;\n\nexport const BoardContainer = styled.div`\n  margin: 0.5em 1.25em;\n\n  @media (min-width: 700px) {\n    margin: 1em;\n  }\n`;\n\nexport const Board = styled.table`\n  table-layout: fixed;\n  width: 250px;\n  height: 250px;\n`;\n\nexport const Heading = styled.h1`\n  color: var(--primary-color);\n  font-size: 1em;\n  margin-bottom: 0.15em;\n  text-shadow: 2px 2px rgba(0, 0, 0, 0.25);\n\n  @media (min-width: 700px) {\n    font-size: 1.5em;\n  }\n`;\n\nexport const Cell = styled.td`\n  width: 25px;\n  height: 25px;\n  color: ${(props) => (props.isActive ? 'black' : 'white')};\n  border: 2px solid rgba(255, 255, 255, 0);\n  background-color: ${(props) =>\n    props.isActive ? 'var(--primary-color)' : !props.isLabel ? '#333' : ''};\n  font-size: 15px;\n  text-align: center;\n  line-height: 20px;\n  padding: 0;\n  margin: 0;\n  transition: border 0.2s ease-in;\n  user-select: none;\n  text-shadow: ${(props) => (props.isLabel ? '3px 3px black' : '')};\n  cursor: ${(props) => (props.isInteractive ? 'pointer' : 'auto')};\n\n  :hover {\n    border: 2px solid\n      rgba(255, 255, 255, ${(props) => (props.isInteractive ? 1 : 0)});\n  }\n\n  @media (min-width: 700px) {\n    width: 30px;\n    height: 30px;\n    line-height: 25px;\n  }\n`;\n\nexport const FlexibleFormat = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (min-width: 700px) {\n    flex-direction: row;\n  }\n`;\n\nexport const BlurBackground = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(255, 255, 255, 0.075);\n  backdrop-filter: blur(5px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Button = styled.button`\n  background-color: var(--primary-color);\n  color: black;\n  border-radius: 3px;\n  padding: 0.5em 1em;\n  font-size: 1em;\n  margin: ${({ margin }) => margin};\n  border: none;\n  cursor: pointer;\n  transition: filter 0.2s ease-out;\n\n  :focus {\n    outline: none;\n  }\n\n  :hover {\n    filter: brightness(120%);\n  }\n`;\n\nexport const Text = styled.p`\n  color: white;\n  margin: 1em;\n`;\n\nexport const TooltipContainer = styled.span`\n  position: absolute;\n  background-color: #222;\n  width: ${({ width }) => width};\n  border-radius: 20px;\n  padding: 0.25em 1em;\n  border: 1px solid var(--primary-color);\n  border-bottom-left-radius: 0px;\n  color: white;\n`;\n","import React from 'react';\n\nimport { Nav, Title, Logo } from '../style';\n\nconst Header = () => {\n  return (\n    <Nav>\n      <Title>Battleships</Title>\n      <Logo\n        src=\"https://static.thenounproject.com/png/44759-200.png\"\n        alt=\"Logo\"\n      />\n    </Nav>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport { BoardContainer, Heading, Board, Cell } from '../style';\n\nconst Gameboard = ({\n  title,\n  board,\n  receivedAttacks,\n  clickHandler,\n  isLabelled = false,\n  isInteractive = false,\n  areShipsHidden = false,\n}) => {\n  const labels = ['', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n\n  const getAttack = (x, y) => {\n    return receivedAttacks?.find((attack) => attack.x === x && attack.y === y);\n  };\n\n  const getIcon = (x, y) => {\n    const attack = getAttack(x, y);\n    if (!attack) return;\n    return attack.isSuccess ? 'X' : 'O';\n  };\n\n  return (\n    <BoardContainer>\n      <Heading>{title}</Heading>\n      <Board>\n        <tbody>\n          {isLabelled && (\n            <tr>\n              {labels.map((label, i) => (\n                <Cell key={i} isLabel>\n                  {label}\n                </Cell>\n              ))}\n            </tr>\n          )}\n          {board.map((row, j) => (\n            <tr key={j}>\n              {isLabelled && (\n                <Cell key={j} isLabel>\n                  {j}\n                </Cell>\n              )}\n              {row.map((cell, i) => (\n                <Cell\n                  key={i}\n                  isActive={cell && !areShipsHidden}\n                  isInteractive={isInteractive && !getAttack(i, j)}\n                  onClick={() => {\n                    if (isInteractive && !getAttack(i, j)) clickHandler(i, j);\n                  }}\n                >\n                  {getIcon(i, j)}\n                </Cell>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Board>\n    </BoardContainer>\n  );\n};\n\nexport default Gameboard;\n","const createGameboard = (size) => {\n  let gameboard = Array.from({ length: size }, () =>\n    Array.from({ length: size }, () => 0),\n  );\n\n  const ships = [];\n  const attacks = [];\n\n  const getBoard = () => gameboard;\n  const getAttacks = () => attacks;\n\n  const place = (x, y, ship, isHorizontal = true) => {\n    if ([x, y, ship].includes(undefined)) {\n      throw new Error('Arguments x, y & ship are required');\n    }\n\n    if (typeof x !== 'number' || x !== parseInt(x) || x < 0 || x > size - 1) {\n      throw new Error('x coordinate must be an integer between 0-9');\n    }\n\n    if (typeof y !== 'number' || y !== parseInt(y) || y < 0 || y > size - 1) {\n      throw new Error('y coordinate must be an integer between 0-9');\n    }\n\n    if (\n      ship === null ||\n      typeof ship !== 'object' ||\n      ship.length === undefined ||\n      ship.hit === undefined ||\n      ship.isSunk === undefined ||\n      typeof ship.length !== 'number' ||\n      typeof ship.hit !== 'function' ||\n      typeof ship.isSunk !== 'function'\n    ) {\n      throw new Error('ship must be a ship object');\n    }\n\n    if (typeof isHorizontal !== 'boolean') {\n      throw new Error('isHorizontal must be a boolean');\n    }\n\n    // if ship placed horizontally & it overflows the gameboard, shift it left\n    // by the required number of places\n    let xx = isHorizontal\n      ? x + ship.length > size\n        ? size - ship.length\n        : x\n      : x;\n\n    // if ship placed vertically & it overflows the gameboard, shift it up by\n    // the required number of places\n    let yy = !isHorizontal\n      ? y + ship.length > size\n        ? size - ship.length\n        : y\n      : y;\n\n    // make value copy of gameboard to avoid gameboard state update\n    // until all ship positions have been checked\n    const tempBoard = gameboard.map((row) => [...row]);\n    for (let i = 0; i < ship.length; i++) {\n      if (tempBoard[yy][xx]) {\n        throw new Error('This ship overlaps another already placed');\n      }\n      tempBoard[yy][xx] = ship;\n      isHorizontal ? xx++ : yy++;\n    }\n\n    gameboard = tempBoard;\n    ships.push(ship);\n\n    return gameboard;\n  };\n\n  const getShipPosition = (x, y, ship) => {\n    let i = 0;\n    let j = 0;\n    // count ship cells to right of passed coordinates\n    while (gameboard[y][x + i] === ship) i++;\n\n    if (i > 1) return ship.length - i;\n\n    // count ship cells below passed coordinates if cell exists at y + j\n    while (gameboard[y + j] && gameboard[y + j][x] === ship) j++;\n\n    if (j > 1) return ship.length - j;\n\n    // otherwise (x, y) is the final cell of the ship\n    return ship.length - 1;\n  };\n\n  const receiveAttack = (x, y) => {\n    if ([x, y].includes(undefined)) {\n      throw new Error('Arguments x & y are required');\n    }\n    if (typeof x !== 'number' || x !== parseInt(x) || x < 0 || x > size - 1) {\n      throw new Error('x coordinate must be an integer between 0-9');\n    }\n    if (typeof y !== 'number' || y !== parseInt(y) || y < 0 || y > size - 1) {\n      throw new Error('y coordinate must be an integer between 0-9');\n    }\n\n    const ship = gameboard[y][x];\n\n    if (typeof ship === 'object') {\n      ship.hit(getShipPosition(x, y, ship));\n      attacks.push({ x, y, isSuccess: true });\n      return true;\n    }\n    attacks.push({ x, y, isSuccess: false });\n    return false;\n  };\n\n  const allShipsSunk = () => ships.every((ship) => ship.isSunk());\n\n  return { getBoard, getAttacks, place, receiveAttack, allShipsSunk };\n};\n\nexport default createGameboard;\n","const createPlayer = (gameboard, player = 'Player', isRobot = false) => {\n  if (gameboard === undefined) throw new Error('A gameboard is required');\n\n  if (Object.prototype.toString.call(gameboard).slice(8, -1) !== 'Object')\n    throw new Error('The gameboard must be an object');\n\n  // ensure gameboard object contains the listed properties\n  const {\n    getBoard,\n    getAttacks,\n    place,\n    receiveAttack,\n    allShipsSunk,\n  } = gameboard;\n\n  // check properties are defined and are functions\n  if (\n    getBoard === undefined ||\n    getAttacks === undefined ||\n    place === undefined ||\n    receiveAttack === undefined ||\n    allShipsSunk === undefined ||\n    typeof getBoard !== 'function' ||\n    typeof getAttacks !== 'function' ||\n    typeof place !== 'function' ||\n    typeof receiveAttack !== 'function' ||\n    typeof allShipsSunk !== 'function'\n  ) {\n    throw new Error('gameboard must be a Gameboard object');\n  }\n\n  if (typeof player !== 'string') {\n    throw new Error('Player name must be a string');\n  }\n  if (typeof isRobot !== 'boolean') {\n    throw new Error('isRobot must be a boolean');\n  }\n\n  // populate cells coordinate array\n  let cells = [];\n  getBoard().forEach((row, x) =>\n    row.forEach((_, y) => {\n      cells.push({ x, y });\n    }),\n  );\n\n  const fixedAttack = (x, y) => {\n    const isSuccess = receiveAttack(x, y);\n    cells = cells.filter((cell) => !(cell.x === x && cell.y === y));\n    return isSuccess;\n  };\n\n  const randomAttack = () => {\n    const { x, y } = cells[Math.floor(Math.random() * cells.length)];\n    return fixedAttack(x, y);\n  };\n\n  return {\n    getName: () => player,\n    getType: () => (isRobot ? 'Robot' : 'Human'),\n    getCells: () => cells,\n    getBoard: () => gameboard.getBoard(),\n    takeAttack: isRobot ? fixedAttack : randomAttack,\n  };\n};\n\nexport default createPlayer;\n","const createShip = (length) => {\n  if (typeof length !== 'number') throw new Error('Length must be a number');\n  if (![2, 3, 4, 5].includes(length))\n    throw new Error('Length can only be 2, 3, 4 or 5');\n\n  const state = Array.from({ length }, () => 0);\n  return {\n    length,\n    hit: (position) => {\n      if (typeof position !== 'number')\n        throw new Error('Position must be a number');\n      if (position < 0 || position !== parseInt(position))\n        throw new Error('Position must be a positive integer');\n      if (position >= length)\n        throw new Error('Position must be less than length');\n      state[position] = 1;\n      return state;\n    },\n    isSunk: () => {\n      return state.reduce((sum, el) => sum + el) === length;\n    },\n  };\n};\n\nexport default createShip;\n","import React, { useState, useEffect } from 'react';\n\nimport Gameboard from './Gameboard';\n\nimport createGameboard from '../factories/createGameboard';\nimport createPlayer from '../factories/createPlayer';\nimport createShip from '../factories/createShip';\n\nimport { Container, Notification, FlexibleFormat } from '../style';\n\nconst Game = ({ size, endGame, gameboard }) => {\n  const [gameboards, setGameboards] = useState({\n    human: gameboard ?? createGameboard(size),\n    robot: createGameboard(size),\n  });\n\n  const { human, robot } = {\n    human: createPlayer(gameboards.human, 'Your Waters', false),\n    robot: createPlayer(gameboards.robot, 'Enemy Waters', true),\n  };\n\n  const [isHumanTurn, setIsHumanTurn] = useState(true);\n\n  const [attacks, setAttacks] = useState({ human: [], robot: [] });\n\n  useEffect(() => {\n    [5, 4, 3, 3, 2].forEach((length) => {\n      let hasPlaced = false;\n      while (!hasPlaced) {\n        try {\n          const x = Math.floor(Math.random() * 10);\n          const y = Math.floor(Math.random() * 10);\n          const isHor = Math.random() > 0.5;\n          gameboards.robot.place(x, y, createShip(length), isHor);\n          hasPlaced = true;\n        } catch (e) {}\n      }\n    });\n\n    setGameboards({\n      human: gameboards.human,\n      robot: gameboards.robot,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const checkGameOver = () => {\n    if (gameboards.human.allShipsSunk()) endGame(false);\n    if (gameboards.robot.allShipsSunk()) endGame(true);\n  };\n\n  const robotMove = () => {\n    setTimeout(() => {\n      human.takeAttack();\n      setAttacks({\n        human: gameboards.human.getAttacks(),\n        robot: gameboards.robot.getAttacks(),\n      });\n      setIsHumanTurn(true);\n    }, 1000);\n  };\n\n  const clickHandler = (i, j) => {\n    if (!isHumanTurn) return;\n    robot.takeAttack(i, j);\n    setAttacks({\n      human: gameboards.human.getAttacks(),\n      robot: gameboards.robot.getAttacks(),\n    });\n    setIsHumanTurn(false);\n    robotMove();\n    checkGameOver();\n  };\n\n  return (\n    <Container>\n      <Notification>\n        {isHumanTurn\n          ? 'It is your turn, fire a shot at enemy waters!'\n          : 'The enemy is taking their shot!'}\n      </Notification>\n      <FlexibleFormat>\n        <Gameboard\n          size={size}\n          title={human.getName()}\n          board={gameboards.human.getBoard()}\n          receivedAttacks={attacks.human}\n          clickHandler={clickHandler}\n        />\n        <Gameboard\n          size={size}\n          title={robot.getName()}\n          board={gameboards.robot.getBoard()}\n          receivedAttacks={attacks.robot}\n          areShipsHidden={true}\n          isInteractive={true}\n          clickHandler={clickHandler}\n        />\n      </FlexibleFormat>\n    </Container>\n  );\n};\n\nexport default Game;\n","import React, { useState } from 'react';\n\nimport Gameboard from '../components/Gameboard';\nimport createGameboard from '../factories/createGameboard';\nimport createShip from '../factories/createShip';\n\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\n\nimport { Container, Notification, Button, TooltipContainer } from '../style';\n\nconst Menu = ({ size, startGame }) => {\n  const [gameboard, setGameboard] = useState(createGameboard(size));\n  const [ships, setShips] = useState([5, 4, 3, 3, 2]);\n  const [isHorizontal, setIsHorizontal] = useState(true);\n  const [isFinishedPlacing, setIsFinishedPlacing] = useState(false);\n  const [isInteractive, setIsInteractive] = useState(true);\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const swapAxis = () => setIsHorizontal(!isHorizontal);\n\n  const start = () => {\n    setIsInteractive(false);\n    setIsFinishedPlacing(true);\n    setTimeout(() => startGame(gameboard), 1000);\n  };\n\n  const handleClick = (x, y) => {\n    const tempGameboard = { ...gameboard };\n    try {\n      tempGameboard.place(x, y, createShip(ships[0]), isHorizontal);\n      setGameboard(tempGameboard);\n      setShips(ships.slice(1));\n      if (ships.length === 1) start();\n    } catch (e) {\n      setIsTooltipVisible(true);\n      setTimeout(() => setIsTooltipVisible(false), 2000);\n    }\n  };\n\n  return (\n    <Container>\n      <Notification>Set up your Game Board!</Notification>\n      <Gameboard\n        size={size}\n        board={gameboard.getBoard()}\n        isLabelled={true}\n        isInteractive={isInteractive}\n        clickHandler={handleClick}\n        areShipsHidden={false}\n      />\n      <Button margin=\"0 0 0.5em 0\" onClick={swapAxis}>\n        {isHorizontal ? 'Vertical' : 'Horizontal'}\n      </Button>\n      <MouseTooltip visible={isTooltipVisible} offsetX={10} offsetY={-35}>\n        <TooltipContainer width=\"190px\">\n          Can't place ship here!\n        </TooltipContainer>\n      </MouseTooltip>\n      <MouseTooltip visible={isFinishedPlacing} offsetX={10} offsetY={-35}>\n        <TooltipContainer width=\"150px\">Game Starting!</TooltipContainer>\n      </MouseTooltip>\n    </Container>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\n\nimport {\n  BlurBackground,\n  Container,\n  Notification,\n  Button,\n  Text,\n} from '../style';\n\nconst GameOver = ({ isHumanWinner, startGame }) => {\n  return (\n    <BlurBackground>\n      <Container>\n        <Notification>Game Over</Notification>\n        <Text>\n          {isHumanWinner\n            ? 'Congratulations - You are the winner!'\n            : 'Unlucky - The enemy won!'}\n        </Text>\n        <Button onClick={startGame} margin=\"0 0 0.5em 0\">\n          New Game\n        </Button>\n      </Container>\n    </BlurBackground>\n  );\n};\n\nexport default GameOver;\n","import React, { useState } from 'react';\n\nimport Header from './Header';\nimport Game from './Game';\nimport Menu from './Menu';\n\nimport { GlobalStyle } from '../style';\nimport GameOver from './GameOver';\n\nconst App = () => {\n  const [gameState, setGameState] = useState({\n    start: true,\n    game: false,\n    end: false,\n    gameboard: undefined,\n    isHumanWinner: undefined,\n  });\n\n  const startMenu = () => {\n    setGameState({\n      start: true,\n      game: false,\n      end: false,\n      gameboard: undefined,\n      isHumanWinner: undefined,\n    });\n  };\n\n  const startGame = (gameboard) => {\n    setGameState({\n      start: false,\n      game: true,\n      end: false,\n      gameboard,\n      isHumanWinner: undefined,\n    });\n  };\n\n  const endGame = (isHumanWinner) => {\n    setGameState({\n      start: false,\n      game: true,\n      end: true,\n      isHumanWinner,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <Header />\n      {gameState.start && <Menu size={10} startGame={startGame} />}\n      {gameState.game && (\n        <Game size={10} endGame={endGame} gameboard={gameState.gameboard} />\n      )}\n      {gameState.end && (\n        <GameOver\n          isHumanWinner={gameState.isHumanWinner}\n          startGame={startMenu}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}